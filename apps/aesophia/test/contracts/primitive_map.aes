
contract MapServer =

  function insert : (string, string, pmap(string, string)) => pmap(string, string)
  function delete : (string, pmap(string, string)) => pmap(string, string)

contract PrimitiveMaps =

  record state = { remote : MapServer,
                   map    : pmap(string, string) }

  function init(r) = { remote = r, map = PMap.empty() }
  function set_remote(r) = put(state{ remote = r })

  function insert(k, v, m) : pmap(string, string) = PMap.put(k, v, m)
  function delete(k, m) : pmap(string, string) = PMap.delete(k, m)

  function remote_insert(k, v, m) =
    state.remote.insert(k, v, m)

  function remote_delete(k, m) =
    state.remote.delete(k, m)

  function get_state_map() = state.map

  function insert_state(k, v) = put(state{ map @ m = PMap.put(k, v, m) })
  function delete_state(k)    = put(state{ map @ m = PMap.delete(k, m) })

  function test() =
    let m  = PMap.empty() : pmap(string, string)
    let m1 = PMap.put("foo", "value_of_foo",
             PMap.put("bla", "value_of_bla", m))
    let m2 = PMap.delete("foo", m1)
    let m3 = PMap.put("bla", "new_value_of_bla", m2)
    [PMap.get("foo", m),  PMap.get("bla", m),
     PMap.get("foo", m1), PMap.get("bla", m1),
     PMap.get("foo", m2), PMap.get("bla", m2),
     PMap.get("foo", m3), PMap.get("bla", m3)]

  function return_map() =
    PMap.delete("goo",
      PMap.put("foo", "bar",
      PMap.put("goo", "gaa", PMap.empty())))

  function argument_map(m : pmap(string, string)) =
    PMap.get("foo", m)

